/* MAC-адрес сетевого интерфейса состоит из 6-ти двузначных шестнадцатеричных чисел, разделённых двоеточиями.
Например: '01:32:54:67:89:AB'.
Напишите регулярное выражение, которое проверит, является ли строка MAC-адресом.
Использование: */
let regexp = /ваш regexp/;
alert( regexp.test('01:32:54:67:89:AB') ); // true
alert( regexp.test('0132546789AB') ); // false (нет двоеточий)
alert( regexp.test('01:32:54:67:89') ); // false (5 чисел, должно быть 6)
alert( regexp.test('01:32:54:67:89:ZZ') ) // false (ZZ в конце строки) 

let regexp = /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/;





/* Напишите регулярное выражение, которое соответствует цветам в формате #abc или #abcdef. 
То есть: # и за ним 3 или 6 шестнадцатеричных цифр.
Пример использования:
let regexp = /ваш шаблон/g;
let str = "color: #3f3; background-color: #AA00ef; and: #abcd";
alert( str.match(regexp) ); // #3f3 #AA00ef

P.S. Это должно быть ровно 3 или 6 шестнадцатеричных цифр. 
При этом значения с 4-мя цифрами типа #abcd не должны совпадать в результат. */

let regexp = /#([0-9a-fA-F]{3}){1,2}\b/g;





/* Напишите регулярное выражение, которое ищет любые десятичные числа, 
включая целочисленные, с плавающей точкой и отрицательные.
Пример использования:
let regexp = /ваш шаблон/g;
let str = "-1.5 0 2 -123.4.";
alert( str.match(regexp) ); // -1.5, 0, 2, -123.4 */

let regexp = /-?\d+(\.\d+)?/g;





// Разобрать выражение

let regex = /^\s*(-?\d+(\.\d+)?)\s*([+\-*/])\s*(-?\d+(\.\d+)?)\s*$/;